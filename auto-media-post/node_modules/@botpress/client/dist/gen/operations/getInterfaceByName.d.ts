export interface GetInterfaceByNameRequestHeaders {
}
export interface GetInterfaceByNameRequestQuery {
}
export interface GetInterfaceByNameRequestParams {
    name: string;
    version: string;
}
export interface GetInterfaceByNameRequestBody {
}
export type GetInterfaceByNameInput = GetInterfaceByNameRequestBody & GetInterfaceByNameRequestHeaders & GetInterfaceByNameRequestQuery & GetInterfaceByNameRequestParams;
export type GetInterfaceByNameRequest = {
    headers: GetInterfaceByNameRequestHeaders;
    query: GetInterfaceByNameRequestQuery;
    params: GetInterfaceByNameRequestParams;
    body: GetInterfaceByNameRequestBody;
};
export declare const parseReq: (input: GetInterfaceByNameInput) => GetInterfaceByNameRequest & {
    path: string;
};
export interface GetInterfaceByNameResponse {
    interface: {
        /**
         * ID of the [Interface](#schema_interface)
         */
        id: string;
        /**
         * Creation date of the [Interface](#schema_interface) in ISO 8601 format
         */
        createdAt: string;
        /**
         * Updating date of the [Interface](#schema_interface) in ISO 8601 format
         */
        updatedAt: string;
        /**
         * Name of the [Interface](#schema_interface)
         */
        name: string;
        /**
         * Version of the [Interface](#schema_interface)
         */
        version: string;
        events: {
            /**
             * Event Definition
             */
            [k: string]: {
                /**
                 * Title of the event
                 */
                title?: string;
                /**
                 * Description of the event
                 */
                description?: string;
                schema: {
                    [k: string]: any;
                };
            };
        };
        actions: {
            /**
             * Action definition
             */
            [k: string]: {
                /**
                 * Title of the action
                 */
                title?: string;
                /**
                 * Description of the action
                 */
                description?: string;
                input: {
                    schema: {
                        [k: string]: any;
                    };
                };
                output: {
                    schema: {
                        [k: string]: any;
                    };
                };
            };
        };
        entities: {
            /**
             * Entity definition
             */
            [k: string]: {
                /**
                 * Title of the entity
                 */
                title?: string;
                /**
                 * Description of the entity
                 */
                description?: string;
                schema: {
                    [k: string]: any;
                };
            };
        };
    };
}
