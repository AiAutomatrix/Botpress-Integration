import * as client from '@botpress/client';
import { Request, Response } from '.pnpm/@botpress+sdk@0.8.26_react@18.3.1/node_modules/@botpress/sdk/dist/serve';
import { BotSpecificClient } from '.pnpm/@botpress+sdk@0.8.26_react@18.3.1/node_modules/@botpress/sdk/dist/bot/client';
import * as types from '.pnpm/@botpress+sdk@0.8.26_react@18.3.1/node_modules/@botpress/sdk/dist/bot/client/types';
import { BotContext } from '.pnpm/@botpress+sdk@0.8.26_react@18.3.1/node_modules/@botpress/sdk/dist/bot/context';
import { BaseBot } from '.pnpm/@botpress+sdk@0.8.26_react@18.3.1/node_modules/@botpress/sdk/dist/bot/generic';
type CommonArgs<TBot extends BaseBot> = {
    ctx: BotContext;
    client: BotSpecificClient<TBot>;
};
type MessagePayload<TBot extends BaseBot> = {
    user: client.User;
    conversation: client.Conversation;
    message: types.MessageResponse<TBot>['message'];
    event: client.Event;
    states: {
        [TState in keyof TBot['states']]: {
            type: StateType;
            payload: TBot['states'][TState];
        };
    };
};
type MessageArgs<TBot extends BaseBot> = CommonArgs<TBot> & MessagePayload<TBot>;
type EventPayload<TBot extends BaseBot> = types.EventResponse<TBot>;
type EventArgs<TBot extends BaseBot> = CommonArgs<TBot> & EventPayload<TBot>;
type StateExpiredPayload = {
    state: client.State;
};
type StateExpiredArgs<TBot extends BaseBot> = CommonArgs<TBot> & StateExpiredPayload;
export type StateType = 'conversation' | 'user' | 'bot';
export type MessageHandler<TBot extends BaseBot> = (args: MessageArgs<TBot>) => Promise<void>;
export type EventHandler<TBot extends BaseBot> = (args: EventArgs<TBot>) => Promise<void>;
export type StateExpiredHandler<TBot extends BaseBot> = (args: StateExpiredArgs<TBot>) => Promise<void>;
export type BotHandlers<TBot extends BaseBot> = {
    messageHandlers: MessageHandler<TBot>[];
    eventHandlers: EventHandler<TBot>[];
    stateExpiredHandlers: StateExpiredHandler<TBot>[];
};
export declare const botHandler: <TBot extends BaseBot>(instance: BotHandlers<TBot>) => (req: Request) => Promise<Response | void>;
export {};
